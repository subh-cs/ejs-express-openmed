<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <button id="startRecord">Mic Open</button>
    <button id="stopRecord">Mic Close</button>

    <script>
      // JavaScript code for audio recording and saving
      const startRecordButton = document.getElementById("startRecord");
      const stopRecordButton = document.getElementById("stopRecord");
      // const audioPlayer = document.getElementById('audioPlayer');
      let mediaRecorder;
      let audioChunks = [];

      startRecordButton.addEventListener("click", startRecording);
      stopRecordButton.addEventListener("click", stopRecording);

      async function startRecording() {
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
          });
          mediaRecorder = new MediaRecorder(stream);

          mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
              audioChunks.push(event.data);
            }
          };

          // mediaRecorder.onstop = () => {
          //     const audioBlob = new Blob(audioChunks, { type: 'audio/wave' });
          //     const audioUrl = URL.createObjectURL(audioBlob);
          //     // audioPlayer.src = audioUrl;
          //     // audioPlayer.style.display = 'block';
          //     console.log(audioUrl);
          //     console.log(audioBlob);
          //     const a = document.createElement('a');
          //     a.href = audioUrl;
          //     a.download = 'recorded-audio.wav';
          //     a.style.display = 'none';
          //     document.body.appendChild(a);
          //     a.click();
          //     document.body.removeChild(a);
          // };
          mediaRecorder.onstop = () => {
            // send blob to server as a multipart/form-data
            const audioBlob = new Blob(audioChunks, { type: "audio/wave" });
            const formData = new FormData();
            const data = new URLSearchParams();
            formData.append("audio", audioBlob, "recorded-audio.wav");
            for (const pair of new FormData(formData)) {
              data.append(pair[0], pair[1]);
            }
            fetch("/save-audio", {
              method: "POST",
              body: data,
            })
              .then((response) => response.json())
              .then((result) => {
                console.log("Success:", result);
              })
              .catch((error) => {
                console.error("Error:", error);
              });
          };
          mediaRecorder.start();
          startRecordButton.disabled = true;
          stopRecordButton.disabled = false;
        } catch (error) {
          console.error("Error starting recording:", error);
        }
      }

      function stopRecording() {
        if (mediaRecorder && mediaRecorder.state !== "inactive") {
          mediaRecorder.stop();
          startRecordButton.disabled = false;
          stopRecordButton.disabled = true;
        }
      }
    </script>
  </body>
</html>
